{
  "name": "url-shortener-server",
  "version": "1.0.0",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "mongoose": "^7.6.1",
    "shortid": "^2.2.16"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}
MONGO_URI=mongodb://127.0.0.1:27017/urlShortener
PORT=5000
BASE_URL=http://localhost:5000
import mongoose from "mongoose";

const urlSchema = new mongoose.Schema({
  longUrl: { type: String, required: true },
  shortCode: { type: String, required: true, unique: true },
  date: { type: Date, default: Date.now }
});

export default mongoose.model("Url", urlSchema);
import express from "express";
import mongoose from "mongoose";
import cors from "cors";
import dotenv from "dotenv";
import shortid from "shortid";
import path from "path";
import { fileURLToPath } from "url";
import Url from "./models/Url.js";

dotenv.config();
const app = express();

// Middlewares
app.use(cors());
app.use(express.json());

// MongoDB connection
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log("âœ… MongoDB Connected"))
  .catch(err => console.error(err));

// API - Shorten URL
app.post("/api/shorten", async (req, res) => {
  const { longUrl } = req.body;
  if (!longUrl) return res.status(400).json({ error: "Please provide a URL" });

  try {
    let url = await Url.findOne({ longUrl });
    if (url) {
      return res.json({ shortUrl: `${process.env.BASE_URL}/${url.shortCode}` });
    }

    const shortCode = shortid.generate();
    url = new Url({ longUrl, shortCode });
    await url.save();

    res.json({ shortUrl: `${process.env.BASE_URL}/${shortCode}` });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Server error" });
  }
});

// Redirect route
app.get("/:shortCode", async (req, res) => {
  try {
    const url = await Url.findOne({ shortCode: req.params.shortCode });
    if (url) {
      return res.redirect(url.longUrl);
    }
    res.status(404).json({ error: "URL not found" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Server error" });
  }
});

// Serve frontend in production
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
if (process.env.NODE_ENV === "production") {
  app.use(express.static(path.join(__dirname, "../client/build")));
  app.get("*", (req, res) =>
    res.sendFile(path.resolve(__dirname, "../client/build/index.html"))
  );
}

app.listen(process.env.PORT, () =>
  console.log(`ðŸš€ Server running on port ${process.env.PORT}`)
);
import express from "express";
import mongoose from "mongoose";
import cors from "cors";
import dotenv from "dotenv";
import shortid from "shortid";
import path from "path";
import { fileURLToPath } from "url";
import Url from "./models/Url.js";

dotenv.config();
const app = express();

// Middlewares
app.use(cors());
app.use(express.json());

// MongoDB connection
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log("âœ… MongoDB Connected"))
  .catch(err => console.error(err));

// API - Shorten URL
app.post("/api/shorten", async (req, res) => {
  const { longUrl } = req.body;
  if (!longUrl) return res.status(400).json({ error: "Please provide a URL" });

  try {
    let url = await Url.findOne({ longUrl });
    if (url) {
      return res.json({ shortUrl: `${process.env.BASE_URL}/${url.shortCode}` });
    }

    const shortCode = shortid.generate();
    url = new Url({ longUrl, shortCode });
    await url.save();

    res.json({ shortUrl: `${process.env.BASE_URL}/${shortCode}` });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Server error" });
  }
});

// Redirect route
app.get("/:shortCode", async (req, res) => {
  try {
    const url = await Url.findOne({ shortCode: req.params.shortCode });
    if (url) {
      return res.redirect(url.longUrl);
    }
    res.status(404).json({ error: "URL not found" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Server error" });
  }
});

// Serve frontend in production
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
if (process.env.NODE_ENV === "production") {
  app.use(express.static(path.join(__dirname, "../client/build")));
  app.get("*", (req, res) =>
    res.sendFile(path.resolve(__dirname, "../client/build/index.html"))
  );
}

app.listen(process.env.PORT, () =>
  console.log(`ðŸš€ Server running on port ${process.env.PORT}`)
);
